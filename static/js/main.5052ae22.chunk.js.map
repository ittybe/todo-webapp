{"version":3,"sources":["AddTaskInput.js","Task.js","ChangeTasksToShow.js","TaskBoard.js","App.js","index.js"],"names":["AddTaskInput","onTrigger","event","preventDefault","target","task","value","taskBody","isActive","id","props","parentAddTask","onSubmit","this","autoComplete","className","type","name","placeholder","React","Component","Task","markTaskParent","removeTaskParent","provided","draggableProps","dragHandleProps","ref","innerRef","onClick","markTask","removeTask","ChangeTasksToShow","setTasksToShow","currentTasksToShow","tasksToShow","setAll","textColor","setActive","setCompleted","TaskBoard","window","navigator","vibrate","onDragEnd","result","handleOnDragEnd","tasks","onDragStart","droppableId","snapshot","droppableProps","map","index","draggableId","remove","mark","quantityOnlyActive","clearAllCompleted","guid","s4","Math","floor","random","toString","substring","isUniqueId","filter","length","App","state","isLightTheme","addTask","bind","switchMarkTask","tasks_","slice","console","log","push","setState","JSON","stringify","taskId","taskIndex","findIndex","splice","_allActiveTasks","document","body","style","backgroundColor","propsTasks","destination","tasksGlobal","Array","from","source","reorderedTask","previousTask","indexOf","indexPrev","nextTask","indexNext","changeTheme","getQuantityOnlyActive","tasksToRender","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5052ae22.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport default class AddTaskInput extends React.Component {\r\n    onTrigger = (event) => {\r\n        event.preventDefault();\r\n        if (event.target.task.value !== \"\"){\r\n            let task = {\r\n                taskBody: event.target.task.value,\r\n                isActive: true,\r\n                id: null\r\n            }\r\n            this.props.parentAddTask(task)\r\n            event.target.task.value = \"\"\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onTrigger} autoComplete=\"off\" className=\"add-task-form bg-white dark:bg-d-very-dark-desaturated-blue shadow-lg\"> \r\n                    <div className=\"border-l-light-grayish-blue dark:border-d-very-dark-grayish-blue\"></div>\r\n                    <input type = \"text\" name=\"task\" placeholder=\"Create a new todo...\" \r\n                            className=\"add-task-input dark:bg-d-very-dark-desaturated-blue\"/>\r\n                    {/* <input type = \"submit\" value = \"Submit\"/> */}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class Task extends React.Component {\r\n    markTask() {\r\n        this.props.markTaskParent(this.props.task.id)\r\n    }\r\n\r\n    removeTask() {\r\n        this.props.removeTaskParent(this.props.task.id)\r\n    }\r\n\r\n    render() {\r\n        // drag and drop \r\n        // const {provided, innerRef} = this.props\r\n        return (\r\n            <div\r\n                {...this.props.provided.draggableProps}\r\n                {...this.props.provided.dragHandleProps}\r\n                ref={this.props.innerRef}\r\n                className=\"task border-l-light-grayish-blue dark:border-d-very-very-dark-grayish-blue\"\r\n                >\r\n                <div className={\r\n                    `\r\n                    check\r\n                    dark:d-check\r\n                    ` + (this.props.task.isActive ? \" bg-l-light-grayish-blue dark:bg-d-very-dark-grayish-blue \" : \" bg-check-gradient \")\r\n                }\r\n                >\r\n                    <button onClick={() => this.markTask()} className={\r\n                    (this.props.task.isActive ? \" bg-white dark:bg-d-very-dark-desaturated-blue \" : \" bg-check-gradient \")   \r\n                    }\r\n                    >\r\n                        <div className={\"icon  \" + (this.props.task.isActive? \"\": \"bg-icon-check\")}></div>\r\n                    </button>\r\n                </div> \r\n                <div className={\r\n                    `\r\n                    task-body \r\n                    ` \r\n                }><button className={(this.props.task.isActive? \"\" : \" text-l-light-grayish-blue dark:text-d-very-dark-grayish-blue line-through \")} onClick={() => this.markTask()}>{this.props.task.taskBody}</button></div>\r\n                <button onClick={() => this.removeTask()} className=\"cross \">\r\n                    <div className=\"icon bg-icon-cross sm:bg-none\"></div>\r\n                </button>\r\n            </div>\r\n        ) \r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class ChangeTasksToShow extends React.Component {\r\n    setAll() {\r\n        this.props.setTasksToShow(\"all\")\r\n    }\r\n    \r\n    setActive() {\r\n        this.props.setTasksToShow(\"active\")\r\n    }\r\n\r\n    setCompleted() {\r\n        this.props.setTasksToShow(\"completed\")\r\n    }\r\n\r\n    textColor(currentTasksToShow) {\r\n        return this.props.tasksToShow === currentTasksToShow ? \" text-primary-blue \" : \" text-l-dark-grayish-blue dark:text-d-dark-grayish-blue \";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"change-tasks flex flex-row justify-center rounded bg-white dark:bg-d-very-dark-desaturated-blue shadow-2xl sm:shadow-none p-2 sm:p-0 \">\r\n                <button onClick={()=> this.setAll()} className={`m-2 hover:text-l-very-dark-grayish-blue dark:hover:text-d-light-grayish-blue-hover` + this.textColor(\"all\")}>All</button>\r\n                <button onClick={()=> this.setActive()} className={`m-2 hover:text-l-very-dark-grayish-blue dark:hover:text-d-light-grayish-blue-hover` + this.textColor(\"active\")}>Active</button>\r\n                <button onClick={()=> this.setCompleted()} className={`m-2 hover:text-l-very-dark-grayish-blue dark:hover:text-d-light-grayish-blue-hover` + this.textColor(\"completed\")}>Completed</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport ChangeTasksToShow from \"./ChangeTasksToShow\";\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default class TaskBoard extends React.Component {\r\n    onDragStart() {\r\n        // good times\r\n        if (window.navigator.vibrate) {\r\n            window.navigator.vibrate(25);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"flex-grow rounded bg-white dark:bg-d-very-dark-desaturated-blue shadow-2xl my-6\">\r\n                    <DragDropContext onDragEnd={(result) => { this.props.handleOnDragEnd(result, this.props.tasks) }} onDragStart={()=>this.onDragStart()}>\r\n                        <Droppable droppableId=\"tasks\">\r\n                            {(provided, snapshot) => {\r\n                                return (<div ref={provided.innerRef} {...provided.droppableProps} >\r\n                                    {this.props.tasks.map((task, index) => {\r\n                                        return (\r\n                                            <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                                {(provided) => {\r\n                                                    return (<Task\r\n                                                        key={task.id}\r\n                                                        index={index}\r\n                                                        removeTaskParent={this.props.remove}\r\n                                                        markTaskParent={this.props.mark}\r\n                                                        task={task}\r\n                                                        innerRef={provided.innerRef}\r\n                                                        provided={provided}\r\n                                                    />)\r\n                                                }}\r\n                                            </Draggable>\r\n                                        )\r\n                                    })}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                                )\r\n                            }}\r\n                            \r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                    <div className=\"flex flex-row p-4 sm:py-2 justify-between items-center text-l-dark-grayish-blue dark:text-d-very-dark-grayish-blue\">\r\n                        <div>{this.props.quantityOnlyActive} items left</div>\r\n                        <div className=\"hidden sm:block\"><ChangeTasksToShow tasksToShow={this.props.tasksToShow} setTasksToShow={this.props.setTasksToShow} /></div>\r\n                        <button onClick={this.props.clearAllCompleted} className=\"hover:text-l-very-dark-grayish-blue dark:hover:text-d-light-grayish-blue-hover\">Clear completed</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"sm:hidden\">\r\n                    <ChangeTasksToShow tasksToShow={this.props.tasksToShow} setTasksToShow={this.props.setTasksToShow} />\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport AddTaskInput from \"./AddTaskInput\";\r\nimport TaskBoard from \"./TaskBoard\"\r\n\r\nlet guid = () => {\r\n    let s4 = () => {\r\n        return Math.floor((1 + Math.random()) * 0x10000)\r\n            .toString(16)\r\n            .substring(1);\r\n    }\r\n    //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nfunction isUniqueId(tasks, id)\r\n{\r\n    return (tasks.filter((task) => task.id === id)).length === 0\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        \r\n        this.state = {\r\n            tasks: [\r\n            // {\r\n            //     taskBody: \"lorem\",\r\n            //     isActive: true or false\r\n            // }\r\n            ],\r\n            tasksToShow: \"all\", // all active completed\r\n            isLightTheme: true\r\n        }\r\n        // binding for event handlers\r\n        this.addTask = this.addTask.bind(this)\r\n        this.markTask = this.markTask.bind(this)\r\n        this.switchMarkTask = this.switchMarkTask.bind(this)\r\n        this.removeTask = this.removeTask.bind(this)\r\n        this.setTasksToShow = this.setTasksToShow.bind(this)\r\n        this.clearAllCompleted = this.clearAllCompleted.bind(this)\r\n        this.handleOnDragEnd = this.handleOnDragEnd.bind(this)\r\n    }\r\n\r\n    addTask(task){\r\n        let tasks_ = this.state.tasks.slice();  // copy\r\n        let id = guid()\r\n        for (let index = 0; index < 10 && !isUniqueId(tasks_, id); index++) {\r\n            id = guid()\r\n            console.log(\"not unique id!\")\r\n        }\r\n        task.id = id\r\n\r\n        tasks_.push(task)\r\n        this.setState(\r\n            {\r\n                tasks: tasks_\r\n            })\r\n        \r\n        console.log(`tasks ${JSON.stringify(task)} added`)\r\n    }\r\n\r\n    markTask(taskId, isActive) {\r\n        let tasks_ = this.state.tasks.slice()\r\n        let taskIndex = tasks_.findIndex(task => task.id === taskId)\r\n        if (taskIndex !== -1) {\r\n            tasks_[taskIndex].isActive = isActive;\r\n            this.setState({tasks: tasks_})\r\n            console.log(`task ${taskId} marked, isActive ${isActive}`)\r\n        }\r\n        else {\r\n            console.log(`task ${taskId} not marked`)\r\n        }\r\n    }\r\n\r\n    switchMarkTask(taskId) {\r\n        let tasks_ = this.state.tasks.slice()\r\n        let taskIndex = tasks_.findIndex(task => task.id === taskId)\r\n        this.markTask(taskId, !tasks_[taskIndex].isActive)\r\n    }\r\n\r\n    removeTask(taskId) {\r\n        let tasks_ = this.state.tasks.slice()\r\n        let taskIndex = tasks_.findIndex(task => task.id === taskId)\r\n        if (taskIndex !== -1) {\r\n            tasks_.splice(taskIndex, 1)\r\n            this.setState({tasks: tasks_})\r\n            console.log(`task ${taskId} removed`)\r\n        }\r\n        else {\r\n            console.log(`task ${taskId} not removed`)\r\n        }\r\n    }\r\n\r\n    removeCompleted(){\r\n\r\n    }\r\n\r\n    tasksToRender() {\r\n        // here tasks sorted by \r\n        // active completed and all \r\n        // it returns tasks array\r\n        switch (this.state.tasksToShow) {\r\n            case \"all\":{\r\n                return this.state.tasks;\r\n            }\r\n\r\n            case \"active\":{\r\n                let tasks = this.state.tasks.filter((task) => task.isActive)\r\n                return tasks;               \r\n            }\r\n                \r\n            case \"completed\":{\r\n                let tasks = this.state.tasks.filter((task) => !task.isActive)\r\n                return tasks;\r\n            }\r\n            default:\r\n                return this.state.tasks\r\n        }\r\n    }\r\n\r\n    setTasksToShow (value) {\r\n        this.setState({tasksToShow: value})\r\n    }\r\n\r\n    clearAllCompleted () {\r\n        let _tasks = this.state.tasks;\r\n        let _allActiveTasks = _tasks.filter((task) => task.isActive);\r\n        \r\n        this.setState({tasks: _allActiveTasks})\r\n    }\r\n\r\n    getQuantityOnlyActive() {\r\n        let _tasks = this.state.tasks;\r\n        let _allActiveTasks = _tasks.filter((task) => task.isActive);\r\n\r\n        return _allActiveTasks.length; \r\n    }\r\n\r\n    changeTheme(){\r\n        let isLightTheme = this.state.isLightTheme\r\n        this.setState({isLightTheme: !isLightTheme})\r\n        // change document bg with pure js \r\n        if (this.state.isLightTheme){\r\n            document.body.style.backgroundColor = \"var(--d-very-dark-blue)\"\r\n        }\r\n        else {\r\n            document.body.style.backgroundColor = \"var(--l-light-gray)\"\r\n        }\r\n\r\n    }\r\n\r\n    handleOnDragEnd(result, propsTasks) {\r\n        if (!result.destination) return;\r\n        console.log(`in handleOnDragEnd`)\r\n        const tasksGlobal = Array.from(this.state.tasks)\r\n        const tasks = Array.from(propsTasks);\r\n        const [reorderedTask] = tasks.splice(result.source.index, 1);\r\n        tasks.splice(result.destination.index, 0, reorderedTask);\r\n\r\n        // if not last elem\r\n        if (result.source.index !== tasks.length - 1) {\r\n            // get previous task by decreasing destination index\r\n            let previousTask = tasks[result.destination.index - 1];            \r\n            // then cut out reordered task in main task array \r\n            let index = tasksGlobal.indexOf(reorderedTask)\r\n            tasksGlobal.splice(index, 1)\r\n            // and paste reordered task right after previous task\r\n            let indexPrev = tasksGlobal.indexOf(previousTask)\r\n            tasksGlobal.splice(indexPrev+1, 0, reorderedTask)\r\n        }\r\n        else {\r\n            // get next task by increasing destination index\r\n            let nextTask = tasks[result.destination.index + 1]\r\n            // then cut out reordered task in main task array \r\n            let index = tasksGlobal.indexOf(reorderedTask)\r\n            tasksGlobal.splice(index, 1)\r\n            // and paste reordered task right before next task  \r\n            let indexNext = tasksGlobal.indexOf(nextTask)\r\n            tasksGlobal.splice(indexNext, 0, reorderedTask)\r\n        }\r\n        this.setState({tasks: tasksGlobal})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={(this.state.isLightTheme? \"\" : \" dark\")}>\r\n                <div className={`main-bg bg-img-light-mb sm:bg-img-light-desk dark:bg-img-dark-mb sm:dark:bg-img-dark-desk bg-top bg-no-repeat bg-contain overflow-auto`}>\r\n                    <div className={`mx-8 my-12 sm:m-auto sm:my-12 flex flex-col flex-grow justify-center max-w-xl`}>\r\n                        <div className=\"header flex justify-between items-center\">\r\n                            <div className=\"text-4xl font-bold text-white tracking-widest text-center\">TODO</div>\r\n                            <button className=\"bg-moon-sign dark:bg-sun-sign bg-no-repeat bg-auto\" onClick={()=>this.changeTheme()}></button>\r\n                        </div>\r\n                        <div className=\"flex-grow flex flex-col my-12 dark:text-d-light-grayish-blue\">\r\n                            <AddTaskInput parentAddTask={this.addTask}/>\r\n                            <TaskBoard handleOnDragEnd={this.handleOnDragEnd} quantityOnlyActive={this.getQuantityOnlyActive()} tasks={this.tasksToRender()} tasksToShow={this.state.tasksToShow} setTasksToShow={this.setTasksToShow} clearAllCompleted={this.clearAllCompleted} remove={this.removeTask} mark={this.switchMarkTask} />\r\n                            <div className=\"flex justify-center my-12 items-center text-l-dark-grayish-blue dark:text-d-very-dark-grayish-blue\">Drag and drop to reorder list</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// src/index.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './variables.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}
/* ./src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;700&display=swap');

body {
    font-size: var(--font-size);
    font-family: var(--font-family);
    font-weight: var(--weight-thin);
}

.page-wrapper {
    background-size: 430px;
    /* preventing child top margin from shifting parent object  */
    overflow: auto;  
}

#root {
    display: flex;
    flex-direction: column;
}

.header button {
    width: 30px;
}

.header button::after {
    content: "";
    display: block;
    padding-top: 100%;
}

input:focus {
    outline: none;
}

.icon {
    @apply bg-center bg-no-repeat;
    width: 15px;
    background-size: 100%;
}


.icon::after{
    content: "";
    display: block;
    padding-top: 100%;
}

/* 
gradient border pseudo element
*/
/* 

this is not ok, we need to change border depending on our state 
pseudo elements cant be readed or changed through js
.check * {
    position: relative;
    z-index: 10;
}
.check {
    @apply rounded-full m-4 p-2;
    
    box-sizing: border-box;
    position: relative;
    background-clip: padding-box; !important
    border: solid var(--check-border) transparent; !important 
}

.check::before{
    content: '';
    position: absolute;
    top: 0; right: 0; bottom: 0; left: 0;
    z-index: -1;
    margin: var(--check-border-neg); 
    border-radius: inherit;
    /* color of border 
    background: var(--d-dark-grayish-blue);
} */

/* 
gradient border wrapper 
*/
.task {
    @apply flex flex-row items-start p-4 border-b border-l-light-grayish-blue;
}

.task:hover .cross>.icon{
    @apply bg-icon-cross;
}

.cross {
    @apply p-1;
}

.check {
    @apply rounded-full p-px flex justify-center items-center hover:bg-check-gradient;
    position: relative;
}

.check>button{
    @apply rounded-full p-1 bg-white;
}

.task-body {
    @apply flex-grow text-left self-center mx-4;
}

.change-tasks{ 
    @apply flex flex-row justify-center rounded bg-white p-2 shadow-2xl sm:shadow-none;

}

.change-tasks>button {
    @apply m-2;

}

.change-tasks>button:hover {
    color: var(--l-very-dark-grayish-blue)
}


.add-task-form {
    @apply w-full rounded p-4 relative flex flex-row;
    background-color: white;
}

.add-task-form>div {
    @apply border rounded-full mr-4 flex;
    /* for some reason only this combination will make perfect circle 25x25 */
    min-width: 25px;
    /* min-height: 25px; */
    max-height: 25px;
    /* max-width: 25px; */
}

.add-task-input {
    @apply w-full;    
    caret-color: var(--primary-bright-blue);
}
